from mainRandomForest import *
import time

taux = time.time()
clf = RandomForest(n_trees=10, max_depth=100, min_samples_split=200)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print(f'A -> Accuracy: {accuracy_score(y_test, predictions)} | tempo: {time.time()-taux}')
taux = time.time()
clf = RandomForest(n_trees=10, max_depth=10, min_samples_split=10)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print(f'B -> Accuracy: {accuracy_score(y_test, predictions)} | tempo: {time.time()-taux}')
taux = time.time()
clf = RandomForest(n_trees=10, max_depth=10, min_samples_split=5)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print(f'C -> Accuracy: {accuracy_score(y_test, predictions)} | tempo: {time.time()-taux}')
taux = time.time()
clf = RandomForest(n_trees=25, max_depth=10, min_samples_split=5)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print(f'D -> Accuracy: {accuracy_score(y_test, predictions)} | tempo: {time.time()-taux}')
taux = time.time()
clf = RandomForest(n_trees=100, max_depth=10, min_samples_split=5)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print(f'E -> Accuracy: {accuracy_score(y_test, predictions)} | tempo: {time.time()-taux}')
taux = time.time()
